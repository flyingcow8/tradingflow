generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  positions     Position[]
  sessions      Session[]
  transactions  Transaction[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Transaction {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  market          Market
  stockCode       String          @map("stock_code")
  stockName       String          @map("stock_name")
  transactionType TransactionType @map("transaction_type")
  quantity        Int
  price           Decimal         @db.Decimal(12, 4)
  currency        Currency
  transactionDate DateTime        @map("transaction_date")
  commission      Decimal?        @db.Decimal(12, 4)
  notes           String?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stockCode])
  @@index([transactionDate])
  @@map("transactions")
}

model Position {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  market      Market
  stockCode   String   @map("stock_code")
  stockName   String   @map("stock_name")
  quantity    Int
  averageCost Decimal  @map("average_cost") @db.Decimal(12, 4)
  currency    Currency
  lastPrice   Decimal? @map("last_price") @db.Decimal(12, 4)
  lastUpdated DateTime @updatedAt @map("last_updated")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockCode, market])
  @@index([userId])
  @@index([stockCode])
  @@map("positions")
}

enum Market {
  US
  HK
}

enum TransactionType {
  BUY
  SELL
}

enum Currency {
  USD
  HKD
}
